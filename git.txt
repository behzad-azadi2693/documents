git help ....				--->show doc help
git config --global user.name "..."	   --->set username for git
git config --global user.email "..."  	--->set email for git
git config --list			--->show config 


git init                         ---> start git
git status                       ---> show condition git
git add ./...                    ---> add change to stage
git commit -m "...."             ---> commit stage


git log                          ---> show logs commits
git log --oneline      
git log --graph 
git log --stat
git show log_id


git branch ...      		           ---> create branche 
git checkout branche_name        ---> swiych to branche
git branch            		         ---> show list of all branch
git branch -a                    ---> show branches with branches hidden
git diff branche1..branche2      --->difference beetwean tow branche
git branch -d  ...    		         ---> delete branch if changes merged to master
git branch -D ...                ---> delete branch anywhere 
git branch -m old_name new_name  ---> change name branch
git checkout -b ....             ---> create branche and move to this branche
git commit -am 'description'     ---> add to commit direct
git commit --amend -m            ---> mergin this commit to last commit with together

git stash
git stash save 'message'         ---> save without effect
git stash list                   ---> show all stash
git stash apply stash_name       ---> apply stash int project
git stash drop stash_name        ---> delete stash
git stash pop stahs_name         ---> apply and remive stash
 
git merge branch_name            ---> merge branch to master first go to branche master
git merge --abort
git rebase branche_name HEAD~2   ---> merge branche and 2 commit laster with together


git diff                         ---> what changed in last commit
git diff staged                  ---> what changed beetwean file into stage and commit

git checkout -- file_name        ---> back to last commit file(this command working in after stage)
git revert id_commit             ---> delete effects commit this command not delete commit

git reset HEAD file_name         ---> if file into stage back to workdirectory(delete file of stage)
git reset --soft id_commit       ---> back to stage and delete logs after, but not change content files self
git reset --mixed id_commit      ---> back to workdirectory and delete logs after, but not change content files self
git reset id_commit --hard       ---> back to workdirectory and delete logs and contents before of git and file


git push git_link branch_name    ---> sending project to repository github
git pull git_link branch_name    ---> received changes project of github and apply
git push --delete branche_name
git fetch git_link               ---> received changes project don't apply(for merge change you shuld run command 'git merge origin/branch_name ') 

git clone link_project           ---> copy project of repository into systrm local

git remote add link_name         ---> set url for origin
git remote -v                    ---> show url for pull and push

git clone git_link

git remote rm origin                             ---> delete remote
git remote set_url url_new_github_for_change     ---> change url remote origin

git mv old_name new_name                         ---> rename or move file 
git mv file_name path/file_name 


git rm file_name                                  ---> remove file
git rm --cached file_name                         ---> canceling following file the of before following 
git rm -r --cached path_to_dir                    ---> canceling following directory the of before following 
rm -rf .git                                       ---> remove git


git tag                           --->show all tag
git show tag_name                 --->show this tag information
git tag -a tag_name -m "messages" --->create tag_name and added to there
git tag -a tag_name -m log_id.    --->create tag_name and added to old log_id
git tag -S tag_name -m "messages"

git commit -S -m "messages"


git bisect start                  --->search binery for error
git bisect bad log_id
git bisect good
git bisect bad


git blame file_name -L8.    --->show ordinray change this line of file
git blame file_name -L8,9.  --->show ordinery change of this line to these line from file



gpg --gen-key
gpg --list-keys
git config --global user.signingkey
git config --global user.signingkey pub_key



git config pull.rebase false  # merge (the default strategy)
git config pull.rebase true   # rebase
git config pull.ff only       # fast-forward only
